def dfs(route, tickets, visited, answer):
    # 모든 티켓을 사용한 경우 경로 추가
    if len(route) == len(tickets) + 1:
        answer.append(route)
        return

    # 경로를 따라 티켓을 사용할 수 있는 경우
    for idx, ticket in enumerate(tickets):
        if ticket[0] == route[-1]:
            # 티켓 사용 여부 체크
            if not visited[idx]:
                visited[idx] = True
                #dfs
                dfs(route + [ticket[1]], tickets, visited, answer)
                visited[idx] = False

def solution(tickets):
    answer = []
    visited = [False] * len(tickets)

    # 티켓을 알파벳 순으로 정렬
    tickets.sort()
    
    print(tickets)

    # DFS 탐색 시작
    dfs(["ICN"], tickets, visited, answer)

    # 가능한 경로 중 알파벳 순으로 가장 앞선 경로 반환
    return answer[0]
