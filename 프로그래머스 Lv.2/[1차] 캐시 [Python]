def solution(cacheSize, cities):
    answer = 0  # 실행 시간을 측정할 변수
    cache = []  # 캐시를 저장할 리스트
    i = 0       # 현재 캐시에 저장된 도시의 개수를 나타내는 변수

    if cacheSize == 0:  # 캐시 크기가 0이면 모든 도시를 캐시에 저장하지 않고 바로 결과 반환
        return len(cities) * 5  # 모든 도시를 처리할 때의 실행 시간 반환

    for c in cities:  # 주어진 도시 리스트를 순회
        city = c.upper()  # 대소문자를 구분하지 않기 위해 도시 이름을 대문자로 변환
        if city in cache:  # 현재 도시가 캐시에 이미 존재하는 경우
            cache.remove(city)  # 해당 도시를 캐시에서 제거하고
            cache.append(city)  # 다시 캐시의 맨 뒤에 추가하여 최신 상태로 업데이트
            answer += 1  # 실행 시간을 1 증가시킴 (캐시에 해당 도시가 있으므로 실행 시간 1 소요)
        else:  # 현재 도시가 캐시에 존재하지 않는 경우
            answer += 5  # 실행 시간을 5 증가시킴 (캐시에 해당 도시를 새로 추가해야 하므로 실행 시간 5 소요)
            if i < cacheSize:  # 현재 캐시에 저장된 도시 개수가 캐시 크기보다 작은 경우
                cache.append(city)  # 캐시에 해당 도시를 추가하고
                i += 1  # 현재 캐시에 저장된 도시 개수를 1 증가시킴
            else:  # 현재 캐시에 저장된 도시 개수가 캐시 크기와 같은 경우
                cache.pop(0)  # 가장 오래된 도시를 캐시에서 제거하고
                cache.append(city)  # 새로운 도시를 캐시의 맨 뒤에 추가하여 캐시를 업데이트
    return answer  # 총 실행 시간을 반환
