from collections import Counter

def solution(str1, str2):
    # 문자열을 소문자로 변환
    str1_low = str1.lower()
    str2_low = str2.lower()
    
    # 다중집합을 저장할 리스트 초기화
    str1_lst = []
    str2_lst = []
    
    # 다중집합 생성
    for i in range(len(str1_low)-1):
        if str1_low[i].isalpha() and str1_low[i+1].isalpha():
            str1_lst.append(str1_low[i] + str1_low[i+1])
    for j in range(len(str2_low)-1):
        if str2_low[j].isalpha() and str2_low[j+1].isalpha():
            str2_lst.append(str2_low[j] + str2_low[j+1])
            
    # 다중집합의 원소들의 등장 횟수를 세는 Counter 객체 생성
    Counter1 = Counter(str1_lst)
    Counter2 = Counter(str2_lst)
    
    # 교집합과 합집합 계산
    inter = list((Counter1 & Counter2).elements())
    union = list((Counter1 | Counter2).elements())
    
    # 자카드 유사도 계산 및 반환
    if len(union) == 0 and len(inter) == 0:  # 공집합일 경우
        return 65536
    else:
        return int(len(inter) / len(union) * 65536)
